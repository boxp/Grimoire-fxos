var Violet=function(t){this.accounts=new Violet.Accounts(t),this.rest=new Violet.REST(this.accounts),this.streaming=new Violet.Streaming(this.accounts)};
!function(e){var n={};n.URIEncode=function(e){return encodeURIComponent(e).replace(/[!'()]/g,escape).replace(/\*/g,"%2A")},n.mergeMaps=function(){var e,n,r,t,o={};for(e=0;e<arguments.length;e++)for(r=arguments[e],t=Object.keys(r),n=0;n<t.length;n++)o[t[n]]=r[t[n]];return o},n.resolveEndpoint=function(e,n){void 0===n&&(n={});var r=e;for(var t in n)r=r.split(":"+t).join(n[t]);return r},e.Util=n}(Violet);
!function(t){var i=function(t){this.multipart=t.multipart===!0,this.method=t.method||"GET",this.formatURIAndData(t.uri||"",t.data||{}),this.xhr=new XMLHttpRequest({mozSystem:!0}),this.authorizationHeader=null};i.prototype={start:function(){if(""===this.uri)return!1;var t=this.xhr;t.open(this.method,this.uri,!0),null!==this.authorizationHeader&&t.setRequestHeader("Authorization",this.authorizationHeader),"POST"!==this.method||this.multipart||t.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),t.send(this.data)},stop:function(){this.xhr.abort()},formatURIAndData:function(i,e){if(this.multipart)this.uri=i,this.data=e;else{var h,n=[];for(h in e)e.hasOwnProperty(h)&&n.push(h+"="+t.Util.URIEncode(e[h]));this.rawData=e,"GET"===this.method?(this.uri=i+(n.length>0?"?"+n.join("&"):""),this.data=null):"POST"===this.method&&(this.uri=i,this.data=n.join("&"))}},setOAuthHeader:function(t){var i="",e=[];for(i in t)t.hasOwnProperty(i)&&e.push(i+'="'+t[i]+'"');this.authorizationHeader="OAuth "+e.join(", ")},addEventListener:function(t,i){this.xhr.addEventListener.call(this.xhr,t,function(){i(this.xhr)}.bind(this))},removeEventListener:function(t,i){this.xhr.removeEventListener.call(this.xhr,t,function(){i(this.xhr)}.bind(this))}},t.HTTPClient=i}(Violet);
!function(t){var e=t.Util,n=t.HTTPClient,o=function(t){this.consumerKey=t.consumerKey,this.consumerSecret=t.consumerSecret,this.accessToken=t.accessToken||"",this.accessTokenSecret=t.accessTokenSecret||"",this.OAuthToken="",this.OAuthTokenSecret=""};o.prototype={requestToken:function(){var t="POST",e="https://api.twitter.com/oauth/request_token",o=new n({method:t,uri:e}),r={oauth_callback:"oob"};return r=this._obtainOAuthParams(o,r,""),o.setOAuthHeader(r),o.start(),new Promise(function(t){o.addEventListener("load",function(e){var n={};e.responseText.split("&").forEach(function(t){var e=t.split("=");n[e[0]]=e[1]}),this.OAuthToken=n.oauth_token,this.OAuthTokenSecret=n.oauth_token_secret,t(n)}.bind(this))}.bind(this))},obtainAccessTokenWithPIN:function(t){var e="POST",o="https://api.twitter.com/oauth/access_token",r=new n({method:e,uri:o}),a={oauth_token:this.OAuthToken,oauth_verifier:t};return a=this._obtainOAuthParams(r,a,this.OAuthTokenSecret),r.setOAuthHeader(a),r.start(),new Promise(function(t){r.addEventListener("load",function(e){var n={};e.responseText.split("&").forEach(function(t){var e=t.split("=");n[e[0]]=e[1]}),t(n)})})},obtainOAuthParams:function(t,e){var n={oauth_token:this.accessToken};return this._obtainOAuthParams(t,n,this.accessTokenSecret,e)},_obtainOAuthParams:function(t,n,o,r){var a=e.mergeMaps({oauth_consumer_key:this.consumerKey,oauth_nonce:this._generateNonce(32),oauth_signature_method:"HMAC-SHA1",oauth_timestamp:String(Math.floor(new Date/1e3)),oauth_version:"1.0"},n),s=r?a:e.mergeMaps(a,t.rawData);return a.oauth_signature=this._generateSignature(t.method,t.uri,s,o),a},_generateNonce:function(t){var e,n="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".split(""),o="";for(e=0;t>e;e++)o+=n[Math.floor(61*Math.random())];return o},_generateSignature:function(t,n,o,r){var a=t.toUpperCase()+"&"+e.URIEncode(n)+"&";a+=e.URIEncode(Object.keys(o).sort().map(function(t){return t+"="+e.URIEncode(o[t])}).join("&")),r||(r="");var s=this.consumerSecret+"&"+r;return e.URIEncode(CryptoJS.HmacSHA1(a,s).toString(CryptoJS.enc.Base64))}},t.OAuth=o}(Violet);
!function(t){var e=function(e){this._accounts={},this._primaryId="",this._oauth=new t.OAuth(e)};e.prototype={requestAuthorizeURI:function(){var t="https://api.twitter.com/oauth/authorize?oauth_token=";return new Promise(function(e,n){this._oauth.requestToken().then(function(n){e(t+n.oauth_token)})["catch"](function(){n()})}.bind(this))},addWithPIN:function(t){return new Promise(function(e,n){this._oauth.obtainAccessTokenWithPIN(t).then(function(t){this.add(t.user_id,t.screen_name,t.oauth_token,t.oauth_token_secret),e()}.bind(this))["catch"](function(){n()})}.bind(this))},add:function(t,e,n,i){this._accounts[t]={accountId:t,screenName:e,accessToken:n,accessTokenSecret:i},""===this._primaryId&&this.setPrimary(t)},getList:function(){return Object.keys(this._accounts).sort()},get:function(t){return t=t||this._primaryId,this._accounts[t]||{accessToken:"",accessTokenSecret:""}},setPrimary:function(t){this._accounts[t]&&(this._primaryId=t)},getPrimary:function(){return this.get(this._primaryId)},getOAuthManager:function(t){var e=this.get(t);return this._oauth.accessToken=e.accessToken,this._oauth.accessTokenSecret=e.accessTokenSecret,this._oauth},remove:function(t){delete this._accounts[t],this._primaryId===t&&(this._primaryId=Object.keys(this._accounts).sort()[0]||"")}},t.Accounts=e}(Violet);
!function(t){var e=function(t,e,s){this._accounts=e,this._accountId=s,this._initWithTweet(t)};e.prototype={_initWithTweet:function(e){var s,i=["text","truncated","in_reply_to_status_id","in_reply_to_status_id_str","in_reply_to_user_id","in_reply_to_user_id_str","in_reply_to_screen_name","geo","coordinates","place","contributors","retweet_count","favorite_count","entities","favorited","retweeted","lang"];e.retweeted_status?(this.retweeted_status=!0,this.retweeted_id=e.id_str,this.retweeted_user=new t.User(e.user,this._accounts,this._accountId),this.retweeted_at=new Date(e.created_at),s=e.retweeted_status):(this.retweeted_status=!1,s=e),i.forEach(function(t){this[t]=e[t]||null}.bind(this)),this.id=s.id_str,this.user=new t.User(s.user,this._accounts,this._accountId),this.created_at=new Date(s.created_at),this.source={name:s.source.match(/<a.*>(.*)<\/a>/)[1],url:s.source.match(/<a\shref=\"(.*?)\"\srel=\"nofollow\">.*<\/a>/)[1]}}},t.Tweet=e}(Violet);
!function(o){var e=function(o,e,i){this._accounts=e,this._accountId=i,this._initWithUser(o)};e.prototype={_initWithUser:function(o){var e=["name","screen_name","location","profile_location","description","url","entities","protected","followers_count","friends_count","listed_count","created_at","favourites_count","utc_offset","time_zone","geo_enabled","verified","statuses_count","lang","contributors_enabled","is_translator","is_translation_enabled","profile_background_color","profile_background_image_url","profile_background_image_url_https","profile_background_tile","profile_image_url","profile_image_url_https","profile_banner_url","profile_link_color","profile_sidebar_border_color","profile_sidebar_fill_color","profile_text_color","profile_use_background_image","default_profile","default_profile_image","following","follow_request_sent","notifications"];e.forEach(function(e){this[e]=o[e]||null}.bind(this)),this.id=o.id_str}},o.User=e}(Violet);
!function(t){var e=(t.Util,function(e){this.accounts=e,this.messageParser=new t.Streaming.MessageParser(e),this._events={},this._connections={userStream:{},filterStream:{}}});e.prototype={apiBaseURI:"https://stream.twitter.com/1.1/",endpoints:{userStream:{method:"GET",path:"https://userstream.twitter.com/1.1/user.json"},filterStream:{method:"POST",path:"statuses/filter.json"}},on:function(t,e){this._events[t]=e},startUserStream:function(t){var e=this.endpoints.userStream.method,s=this.endpoints.userStream.path,r="user";this._connections.userStream[t]||(this._connections.userStream[t]=this._startStreaming(t,e,s,r))},stopUserStream:function(t){this._connections.userStream[t].stop(),delete this._connections.userStream[t]},startFilterStream:function(t){var e=this.endpoints.filterStream.method,s=this.apiBaseURI+this.endpoints.filterStream.path,r="filter";this._connections.filterStream[t]||(this._connections.filterStream[t]=this._startStreaming(t,e,s,r))},stopFilterStream:function(t){this._connections.filterStream[t].stop(),delete this._connections.filterStream[t]},_startStreaming:function(e,s,r,n){e=e||this.accounts.getPrimary().accountId;var i=this.accounts.getOAuthManager(e),a=new t.HTTPClient({method:s,uri:r});return a.setOAuthHeader(i.obtainOAuthParams(a)),a.addEventListener("progress",function(t){var s=t.responseText.split("\r\n");s[s.length-2]&&this._parseStream(e,n,JSON.parse(s[s.length-2]))}.bind(this)),a.start(),a},_parseStream:function(t,e,s){var r=this.messageParser.parse(t,s);"function"==typeof this._events[r.type]&&this._events[r.type].call(null,t,e,r.data)}},t.Streaming=e}(Violet);
!function(t){var e=function(t){this.accounts=t};e.prototype={parse:function(e,a){return a.id?{type:"tweet",data:new t.Tweet(a,this.accounts,e)}:a.event?{type:"event",data:t.Streaming.Event(a,this.accounts,e)}:a["delete"]&&a["delete"].status?{type:"delete",data:a["delete"].status}:{}}},t.Streaming.MessageParser=e}(Violet);
!function(t){var n=t.Util,e=t.HTTPClient,r="https://api.twitter.com/1.1/",a="https://upload.twitter.com/1.1/",i=function(t,i,o,s,c){var l=s?a:r,u={callback:function(){},errorback:function(){}},p=function(r,a){a=a||c.getPrimary().accountId;var u=n.resolveEndpoint(i,r),p=l+u+".json",d=c.getOAuthManager(a),h=new e({method:t,uri:p,data:r,multipart:s});h.setOAuthHeader(d.obtainOAuthParams(h,s)),h.addEventListener("load",function(t){var n=[JSON.parse(t.responseText)];"function"==typeof o&&(n=o.apply(null,n)),this.callback.apply(null,n)}.bind(this)),h.addEventListener("error",function(t){this.errorback.apply(null,[a,JSON.parse(t.responseText)])}.bind(this)),h.start()}.bind(u);return p.on=function(t,n){"success"===t?this.callback=n:"error"===t&&(this.errorback=n)}.bind(u),p};t.RESTRequest=i}(Violet);
!function(t){var s=(t.Util,t.RESTRequest),e=function(s){this._accounts=s,this._registerMethods("statuses",t.REST.Statuses),this._registerMethods("favorites",t.REST.Favorites),this._registerMethods("media",t.REST.Media)};e.prototype={_registerMethods:function(t,e){var i={};for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];i[r]=s(o.method,o.path,o.responseProc,o.multipart||!1,this._accounts)}this[t]=i}},t.REST=e}(Violet);
!function(e){var t=e.Tweet,n={mentionsTimeline:{method:"GET",path:"statuses/mentions_timeline",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},userTimeline:{method:"GET",path:"statuses/user_timeline",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},homeTimeline:{method:"GET",path:"statuses/home_timeline",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},retweetsOfMe:{method:"GET",path:"statuses/retweets_of_me",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},retweets:{method:"GET",path:"statuses/retweets/:id",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},show:{method:"GET",path:"statuses/show/:id",responseProc:function(e){return[new t(e)]}},destroy:{method:"POST",path:"statuses/destroy/:id",responseProc:function(e){return[new t(e)]}},update:{method:"POST",path:"statuses/update",responseProc:function(e){return[new t(e)]}},retweet:{method:"POST",path:"statuses/retweet/:id",responseProc:function(e){return[new t(e)]}}};e.REST.Statuses=n}(Violet);
!function(e){var t=e.Tweet,r={list:{method:"GET",path:"favorites/list",responseProc:function(e){return[e.map(function(e){return new t(e)})]}},destroy:{method:"POST",path:"favorites/destroy",responseProc:function(e){return[new t(e)]}},create:{method:"POST",path:"favorites/create",responseProc:function(e){return[new t(e)]}}};e.REST.Favorites=r}(Violet);
!function(o){var t={upload:{method:"POST",path:"media/upload",responseProc:function(o){return[o]},multipart:!0}};o.REST.Media=t}(Violet);
var CryptoJS=CryptoJS||function(t,n){var i={},r=i.lib={},e=r.Base=function(){function t(){}return{extend:function(n){t.prototype=this;var i=new t;return n&&i.mixIn(n),i.hasOwnProperty("init")||(i.init=function(){i.$super.init.apply(this,arguments)}),i.init.prototype=i,i.$super=this,i},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var n in t)t.hasOwnProperty(n)&&(this[n]=t[n]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}}}(),s=r.WordArray=e.extend({init:function(t,i){t=this.words=t||[],this.sigBytes=i!=n?i:4*t.length},toString:function(t){return(t||a).stringify(this)},concat:function(t){var n=this.words,i=t.words,r=this.sigBytes,e=t.sigBytes;if(this.clamp(),r%4)for(var s=0;e>s;s++){var o=i[s>>>2]>>>24-s%4*8&255;n[r+s>>>2]|=o<<24-(r+s)%4*8}else if(i.length>65535)for(var s=0;e>s;s+=4)n[r+s>>>2]=i[s>>>2];else n.push.apply(n,i);return this.sigBytes+=e,this},clamp:function(){var n=this.words,i=this.sigBytes;n[i>>>2]&=4294967295<<32-i%4*8,n.length=t.ceil(i/4)},clone:function(){var t=e.clone.call(this);return t.words=this.words.slice(0),t},random:function(n){for(var i,r=[],e=function(n){var n=n,i=987654321,r=4294967295;return function(){i=36969*(65535&i)+(i>>16)&r,n=18e3*(65535&n)+(n>>16)&r;var e=(i<<16)+n&r;return e/=4294967296,e+=.5,e*(t.random()>.5?1:-1)}},o=0;n>o;o+=4){var a=e(4294967296*(i||t.random()));i=987654071*a(),r.push(4294967296*a()|0)}return new s.init(r,n)}}),o=i.enc={},a=o.Hex={stringify:function(t){for(var n=t.words,i=t.sigBytes,r=[],e=0;i>e;e++){var s=n[e>>>2]>>>24-e%4*8&255;r.push((s>>>4).toString(16)),r.push((15&s).toString(16))}return r.join("")},parse:function(t){for(var n=t.length,i=[],r=0;n>r;r+=2)i[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new s.init(i,n/2)}},c=o.Latin1={stringify:function(t){for(var n=t.words,i=t.sigBytes,r=[],e=0;i>e;e++){var s=n[e>>>2]>>>24-e%4*8&255;r.push(String.fromCharCode(s))}return r.join("")},parse:function(t){for(var n=t.length,i=[],r=0;n>r;r++)i[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new s.init(i,n)}},u=o.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(n){throw new Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},f=r.BufferedBlockAlgorithm=e.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=u.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(n){var i=this._data,r=i.words,e=i.sigBytes,o=this.blockSize,a=4*o,c=e/a;c=n?t.ceil(c):t.max((0|c)-this._minBufferSize,0);var u=c*o,f=t.min(4*u,e);if(u){for(var h=0;u>h;h+=o)this._doProcessBlock(r,h);var p=r.splice(0,u);i.sigBytes-=f}return new s.init(p,f)},clone:function(){var t=e.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),h=(r.Hasher=f.extend({cfg:e.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){t&&this._append(t);var n=this._doFinalize();return n},blockSize:16,_createHelper:function(t){return function(n,i){return new t.init(i).finalize(n)}},_createHmacHelper:function(t){return function(n,i){return new h.HMAC.init(t,i).finalize(n)}}}),i.algo={});return i}(Math);
!function(){var e=CryptoJS,t=e.lib,s=t.WordArray,a=t.Hasher,r=e.algo,o=[],h=r.SHA1=a.extend({_doReset:function(){this._hash=new s.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var s=this._hash.words,a=s[0],r=s[1],h=s[2],i=s[3],n=s[4],c=0;80>c;c++){if(16>c)o[c]=0|e[t+c];else{var l=o[c-3]^o[c-8]^o[c-14]^o[c-16];o[c]=l<<1|l>>>31}var _=(a<<5|a>>>27)+n+o[c];_+=20>c?(r&h|~r&i)+1518500249:40>c?(r^h^i)+1859775393:60>c?(r&h|r&i|h&i)-1894007588:(r^h^i)-899497514,n=i,i=h,h=r<<30|r>>>2,r=a,a=_}s[0]=s[0]+a|0,s[1]=s[1]+r|0,s[2]=s[2]+h|0,s[3]=s[3]+i|0,s[4]=s[4]+n|0},_doFinalize:function(){var e=this._data,t=e.words,s=8*this._nDataBytes,a=8*e.sigBytes;return t[a>>>5]|=128<<24-a%32,t[(a+64>>>9<<4)+14]=Math.floor(s/4294967296),t[(a+64>>>9<<4)+15]=s,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA1=a._createHelper(h),e.HmacSHA1=a._createHmacHelper(h)}();
!function(){{var e=CryptoJS,i=e.lib,t=i.Base,s=e.enc,n=s.Utf8,r=e.algo;r.HMAC=t.extend({init:function(e,i){e=this._hasher=new e.init,"string"==typeof i&&(i=n.parse(i));var t=e.blockSize,s=4*t;i.sigBytes>s&&(i=e.finalize(i)),i.clamp();for(var r=this._oKey=i.clone(),a=this._iKey=i.clone(),h=r.words,o=a.words,c=0;t>c;c++)h[c]^=1549556828,o[c]^=909522486;r.sigBytes=a.sigBytes=s,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var i=this._hasher,t=i.finalize(e);i.reset();var s=i.finalize(this._oKey.clone().concat(t));return s}})}}();
!function(){{var r=CryptoJS,a=r.lib,t=a.WordArray,i=r.enc;i.Base64={stringify:function(r){var a=r.words,t=r.sigBytes,i=this._map;r.clamp();for(var n=[],f=0;t>f;f+=3)for(var e=a[f>>>2]>>>24-f%4*8&255,c=a[f+1>>>2]>>>24-(f+1)%4*8&255,h=a[f+2>>>2]>>>24-(f+2)%4*8&255,o=e<<16|c<<8|h,s=0;4>s&&t>f+.75*s;s++)n.push(i.charAt(o>>>6*(3-s)&63));var v=i.charAt(64);if(v)for(;n.length%4;)n.push(v);return n.join("")},parse:function(r){var a=r.length,i=this._map,n=i.charAt(64);if(n){var f=r.indexOf(n);-1!=f&&(a=f)}for(var e=[],c=0,h=0;a>h;h++)if(h%4){var o=i.indexOf(r.charAt(h-1))<<h%4*2,s=i.indexOf(r.charAt(h))>>>6-h%4*2;e[c>>>2]|=(o|s)<<24-c%4*8,c++}return t.create(e,c)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}}();
//# sourceMappingURL=data:application/json;base64,